---
- name: Install build dependencies
  apt:
    name:
      - ninja-build
      - gettext
      - cmake
      - unzip
      - curl
      - build-essential
      - git
      - libc6-dev
      - linux-libc-dev
      - gcc-multilib
      - libtool-bin
      - autoconf
      - automake
      - pkg-config
    state: present
    update_cache: true
  become: true
  tags: nvim

- name: Check if Neovim is installed and get version
  shell: |
    if command -v nvim &> /dev/null; then
      nvim --version | head -1
    else
      echo "not_installed"
    fi
  register: nvim_check
  changed_when: false
  tags: nvim

- name: Get latest stable version from GitHub
  uri:
    url: https://api.github.com/repos/neovim/neovim/releases/latest
    return_content: yes
  register: latest_release
  tags: nvim

- name: Set latest version fact
  set_fact:
    nvim_latest_version: "{{ (latest_release.json.tag_name | regex_replace('^v','')) }}"
  tags: nvim

- name: Check if current Neovim is up to date
  set_fact:
    nvim_needs_update: >-
      {{ nvim_check.stdout == "not_installed" or
         nvim_latest_version not in nvim_check.stdout or
         force_nvim_rebuild | default(false) }}
  tags: nvim

- name: Debug Neovim status
  debug:
    msg:
      - "Current Neovim: {{ nvim_check.stdout }}"
      - "Latest version: {{ nvim_latest_version | default('unknown') }}"
      - "Needs update: {{ nvim_needs_update }}"
  tags: nvim

- name: Remove existing neovim package
  apt:
    name: neovim
    state: absent
  become: true
  when: nvim_needs_update
  ignore_errors: true
  tags: nvim

- name: Remove existing build directory
  file:
    path: "{{ nvim_build_dir }}"
    state: absent
  when: nvim_needs_update
  tags: nvim

- name: Clone or update Neovim repository
  git:
    repo: "{{ nvim_repo_url }}"
    dest: "{{ nvim_build_dir }}"
    version: "stable"
    depth: 1
    update: yes
  when: nvim_needs_update
  tags: nvim

- name: Build Neovim
  command: make CMAKE_BUILD_TYPE={{ nvim_build_type }}
  args:
    chdir: "{{ nvim_build_dir }}"
  when: nvim_needs_update
  tags: nvim

- name: Install Neovim
  command: make install
  args:
    chdir: "{{ nvim_build_dir }}"
  become: true
  when: nvim_needs_update
  tags: nvim

- name: Cleanup build directory
  file:
    path: "{{ nvim_build_dir }}"
    state: absent
  when: nvim_needs_update
  tags: nvim
